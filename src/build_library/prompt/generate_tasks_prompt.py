generate_system = """
You are an expert player in visual puzzle games. The visual puzzle game contains several tasks. Each task contains several input and output grids, the output grid is generated by the input grid through a certain transformation. You have a large amount of concepts to create new tasks.
The input and output grids are represented by matrices, where each cell contains a color represented by a number.    

The corresponding relationship between colors and numbers is delimited by triple backticks as follows.

```
0: black, 1: blue, 2: red, 3: green, 4: yellow, 5: gray, 6: magenta, 7: orange, 8: aqua, 9: maroon
```

Here are some examples of the input and output grids:
```
Task 1:
Object description: Either a long or tall black grid with 2 different colored pixels
Transformation rule: create a pattern of short stripes alternating between the 2 colors. Start from the first colored pixel and create a line that goes to the opposite side using that color. Then go to the second colored pixel and do the same. Continue the pattern of stripes to the RIGHT for a long grid or go DOWN for a tall grid all the way to the end.
Example 1:
Input:
[[0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Output:
[[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]]

Task2:
Object description: two intersecting lines of different colors
Transformation rule: surround the middle point of the intersection with a 3x3 yellow border, leaving the central block in its original color.
Example 1:
Input:
[[0 3 0 0]
[2 2 2 2]
[0 3 0 0]
[0 3 0 0]]
Output:
[[4 4 4 0]
[4 2 4 2]
[4 4 4 0]
[0 3 0 0]]

Task3:
Object description: a large red square and a smaller object of a different color.
Transformation rule: fill in the red square with the other colored object.
Example 1:
Input:
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Output:
[[2 2 2 2 2]
[2 0 1 1 2]
[2 1 0 0 2]
[2 0 1 1 2]
[2 2 2 2 2]]
```

You will be given a concept as a hint, and you should come up with executable codes to generate new inputs and the corresponding transformation code.
"""

generate_system2 = """
You are an expert player in visual puzzle games. The visual puzzle game contains several tasks. Each task contains several input and output grids, the output grid is generated by the input grid through a certain transformation. You have a large amount of concepts to create new tasks.
The input and output grids are represented by matrices, where each cell contains a color represented by a number.    

The corresponding relationship between colors and numbers is delimited by triple backticks as follows.

```
0: black, 1: blue, 2: red, 3: green, 4: yellow, 5: gray, 6: magenta, 7: orange, 8: aqua, 9: maroon
```

Here are some examples of the input and output grids:
```
Task 1:
Object description: Either a long or tall black grid with 2 different colored pixels
Transformation rule: create a pattern of short stripes alternating between the 2 colors. Start from the first colored pixel and create a line that goes to the opposite side using that color. Then go to the second colored pixel and do the same. Continue the pattern of stripes to the RIGHT for a long grid or go DOWN for a tall grid all the way to the end.
Example 1:
Input:
[[0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Output:
[[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]
[0 0 0 0 0 1 0 0 3 0 0 1 0 0 3 0 0 1 0 0 3 0 0]]

Task2:
Object description: two intersecting lines of different colors
Transformation rule: surround the middle point of the intersection with a 3x3 yellow border, leaving the central block in its original color.
Example 1:
Input:
[[0 3 0 0]
[2 2 2 2]
[0 3 0 0]
[0 3 0 0]]
Output:
[[4 4 4 0]
[4 2 4 2]
[4 4 4 0]
[0 3 0 0]]

Task3:
Object description: a large red square and a smaller object of a different color.
Transformation rule: fill in the red square with the other colored object.
Example 1:
Input:
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Output:
[[2 2 2 2 2]
[2 0 1 1 2]
[2 1 0 0 2]
[2 0 1 1 2]
[2 2 2 2 2]]
```

You will be given a concept as a hint, and you should come up with executable codes to generate new inputs and the corresponding transformation code.
The number only represents the color of the object, the transformation rule must not use the number to do calculation.
"""


def content_prompt(concepts):
    return f"""
Here are the concepts you need to implement:

{concepts}

Please generate a transformation rule and the description of the object using this concept. You can also add intersting details to make the task more fun. Please give the transformation rule and object description in the following format:
```
Transformation rule: [rule]
Object description: [description]
```
The object description should serve for demonstrate the transformation rule, and must not be meaningless random numbers.

According to the object description and transformation rule, please implement the functions generate_input() -> np.ndarray and transform_grid(input_grid: np.ndarray[int]) -> np.ndarray[int] function.
The codes should be in the following format:
```python
def generate_input() -> np.ndarray:
    # generate input grid with the transformation concept
    return input_grid

def transform_grid(input_grid: np.ndarray[int]) -> np.ndarray[int]:
    # implement the transformation concept
    return output_grid
```
The function generate_input() should be stochastic, which means every time you call it, it should generate a different input grid. It must contain meaningful pattern objects according to the hint concept rather than random numbers. Otherwise the task will be rejected.
The function transform_grid() should be deterministic, which means given the same input grid, it should always generate the same output grid.
The genertaed input should only contains the colors that are defined in the color-number relationship. Every grid's size should be ranging from 1x1 to 30x30.
The number only represents the color of the object, the transformation rule MUST NOT use the number to do calculation, and not do any calculation on the number (such as add one to each color).
"""

def content_prompt_strict(concepts):
    return f"""
Here are the concepts you need to implement:

{concepts}

Please generate a transformation rule and the description of the object using these concepts. But you must follow the given concept strictly. Creat objects with intersting shape, not just stripe or random dot. Please give the transformation rule and object description you derive based on the given concepts in the following format:
```
Transformation rule: [rule]
Object description: [description]
```
The object description should serve for demonstrate the transformation rule, and must not be meaningless random numbers.

According to the object description and transformation rule, please implement the functions generate_input() -> np.ndarray and transform_grid(input_grid: np.ndarray[int]) -> np.ndarray[int] function.
The codes should be in the following format:
```python
def generate_input() -> np.ndarray:
    # generate input grid with the transformation concept
    return input_grid

def transform_grid(input_grid: np.ndarray[int]) -> np.ndarray[int]:
    # implement the transformation concept
    return output_grid
```
The function generate_input() should be stochastic, which means every time you call it, it should generate a different input grid. It must contain meaningful pattern objects according to the hint concept rather than random numbers. Otherwise the task will be rejected.
The function transform_grid() should be deterministic, which means given the same input grid, it should always generate the same output grid.
The genertaed input should only contains the colors that are defined in the color-number relationship. Every grid's size should be ranging from 1x1 to 30x30.
The number only represents the color of the object, the transformation rule MUST NOT use the number to do calculation, and not do any calculation on the number (such as add one to each color).
"""