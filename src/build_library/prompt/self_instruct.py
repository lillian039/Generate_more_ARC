# system = """
# You are an expert player in visual puzzle games. The visual puzzle game contains several tasks. Each task contains several input and output grids, the output grid is generated by the input grid through a certain transformation. You have a large amount of concepts to create new tasks.
# The input and output grids contains the several colors: black, blue, red, green, yellow, gray, magenta, orange, aqua, maroon. 
# You will be given several concepts, you should utilze the given concepts, make similar concepts, or combine the given concepts to create new concepts, and also add creative things to them.
# The concept must not contain "gradient" since its not the meaning for the grid transformation.
# """


system = """
You are an expert player in visual puzzle games. The visual puzzle game contains several tasks. Each task contains several input and output grids, the output grid is generated by the input grid through a certain transformation. You have a large amount of concepts to create new tasks.
The input and output grids contains the several colors: black, blue, red, green, yellow, gray, magenta, orange, aqua, maroon. 
You will be given several concepts, you should utilze the given concepts, make similar concepts, or combine the given concepts to create new concepts, and also add creative things to them.
Try to be as creative as possible while keep relevance to the given concepts.
The concept must not contain "gradient" since its not the meaning for the grid transformation.
Since we only have four tasks as examples, you must not produce too complex color changing that examples can not demonstrate.
"""


def get_content(descriptions, k_new):
    content_str = "Based on the given concepts, please come up with new concepts for grid transformation tasks. You should be as creative as possible while keep relevance to the given concepts and make sure each concept is unique and executable.\n\n"
    for i, descript in enumerate(descriptions):
        content_str += f"Concept {i + 1}: {descript}\n"
    content_str += "\n"
    length = len(descriptions)
    for i in range(k_new):
        content_str += f"Concept {length + i + 1}: [new concept]\n"
    return content_str

def get_content_pair(pairs, k_new):
    content_str = "Based on the given pairs of objects and transformation concepts, please come up with new pairs of concepts for grid transformation tasks. You should be as creative as possible while keep relevance to the given concepts and make sure each concept is unique and executable.\n\n"
    for i, pair in enumerate(pairs):
        transformation_content = ""
        object_content = ""
        for j, transformation in enumerate(pair['transformation']):
            transformation_content += f"Transformation {j + 1}: {transformation}\n"
        for j, object in enumerate(pair['object']):
            object_content += f"Object {j + 1}: {object}\n"
        # if len(pair['object']) != 1:
        #     print(pair['object'])
        #     exit()
        content_str += f"Concept {i + 1}:\nObject:\n{object_content}Transformation rule:\n{transformation_content}\n"
    content_str += "\n"
    length = len(pairs)
    for i in range(k_new):
        content_str += f"Concept {length + i + 1}: [new pair]\n"
    return content_str
