4c5c2cf0.json

Example 0:
Input:
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 2 0 0 2 0 0 0 0 0 0 0]
[0 0 0 2 2 0 2 0 0 0 0 0 0 0]
[0 0 0 0 0 2 2 0 0 0 0 0 0 0]
[0 0 0 0 2 2 0 0 0 0 0 0 0 0]
[0 0 0 2 0 0 4 0 4 0 0 0 0 0]
[0 0 0 0 0 0 0 4 0 0 0 0 0 0]
[0 0 0 0 0 0 4 0 4 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Output:
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 2 0 0 2 0 2 0 0 2 0 0]
[0 0 0 2 2 0 2 0 2 0 2 2 0 0]
[0 0 0 0 0 2 2 0 2 2 0 0 0 0]
[0 0 0 0 2 2 0 0 0 2 2 0 0 0]
[0 0 0 2 0 0 4 0 4 0 0 2 0 0]
[0 0 0 0 0 0 0 4 0 0 0 0 0 0]
[0 0 0 2 0 0 4 0 4 0 0 2 0 0]
[0 0 0 0 2 2 0 0 0 2 2 0 0 0]
[0 0 0 0 0 2 2 0 2 2 0 0 0 0]
[0 0 0 2 2 0 2 0 2 0 2 2 0 0]
[0 0 0 2 0 0 2 0 2 0 0 2 0 0]]
Example 1:
Input:
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 8 0 0 0 0 0]
[0 0 0 0 0 0 0 8 8 8 0 0 0 0]
[0 0 0 0 0 0 8 8 8 0 0 0 0 0]
[0 0 0 0 3 0 3 0 0 0 0 0 0 0]
[0 0 0 0 0 3 0 0 0 0 0 0 0 0]
[0 0 0 0 3 0 3 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Output:
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 8 0 0 0 0 0 8 0 0 0 0 0]
[0 8 8 8 0 0 0 8 8 8 0 0 0 0]
[0 0 8 8 8 0 8 8 8 0 0 0 0 0]
[0 0 0 0 3 0 3 0 0 0 0 0 0 0]
[0 0 0 0 0 3 0 0 0 0 0 0 0 0]
[0 0 0 0 3 0 3 0 0 0 0 0 0 0]
[0 0 8 8 8 0 8 8 8 0 0 0 0 0]
[0 8 8 8 0 0 0 8 8 8 0 0 0 0]
[0 0 8 0 0 0 0 0 8 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Example 2:
Input:
[[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 8 0 8 0 0 0 0 0]
[0 0 0 0 0 8 0 0 0 0 0 0]
[0 0 0 0 8 0 8 0 0 0 0 0]
[0 0 1 1 0 0 0 0 0 0 0 0]
[0 1 0 1 0 0 0 0 0 0 0 0]
[0 0 1 0 0 0 0 0 0 0 0 0]]
Output:
[[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0 0 0 0]
[0 0 1 0 0 0 0 0 1 0 0 0]
[0 1 0 1 0 0 0 1 0 1 0 0]
[0 0 1 1 0 0 0 1 1 0 0 0]
[0 0 0 0 8 0 8 0 0 0 0 0]
[0 0 0 0 0 8 0 0 0 0 0 0]
[0 0 0 0 8 0 8 0 0 0 0 0]
[0 0 1 1 0 0 0 1 1 0 0 0]
[0 1 0 1 0 0 0 1 0 1 0 0]
[0 0 1 0 0 0 0 0 1 0 0 0]]

==========Human Description==========

In the input, you should see: a colored x shape with another colored shape at one of its corners.

The output grid size: is the same as the input.

To make the output, you have to: mirror the shape at the corner of the x to the other corners of the x so that the x is surrounded by the corner shape.

==========Human Description==========

In the input, you should see: a cube shaped x with a separate color shape extending diagonally from one corner.

The output grid size:  is the same grid as the input.

To make the output, you have to:  add shapes to the remaining 3 corners of the cube shaped x. Mirror the separate shape and add it diagonally to adjacent corners of the cube shaped x. That should give you three corners with extending shapes. For the caddy corner, or furthest corner, or last blank corner, rotate the separate shape 180 degrees and add it diagonally to the cube shaped x. You should end up with a pattern that is identical when slicing in half vertically or horizontally, but not when slicing in half diagonally.

