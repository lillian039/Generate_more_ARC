{"id": 185, "train_io": {"inputs": [[[0, 0, 0], [1, 0, 0], [0, 0, 0]], [[0, 1, 0], [1, 0, 0], [0, 0, 0]], [[0, 0, 1], [0, 0, 0], [1, 0, 0]], [[0, 1, 0], [0, 0, 1], [0, 0, 0]], [[0, 0, 1], [0, 0, 0], [0, 0, 0]], [[1, 1, 0], [0, 0, 0], [1, 0, 0]], [[0, 1, 0], [1, 1, 0], [0, 0, 0]], [[1, 1, 0], [0, 0, 0], [1, 0, 1]], [[0, 1, 0], [1, 1, 0], [1, 0, 0]], [[1, 0, 0], [0, 0, 1], [0, 1, 1]]], "outputs": [[[2, 0, 0], [0, 0, 0], [0, 0, 0]], [[2, 2, 0], [0, 0, 0], [0, 0, 0]], [[2, 2, 0], [0, 0, 0], [0, 0, 0]], [[2, 2, 0], [0, 0, 0], [0, 0, 0]], [[2, 0, 0], [0, 0, 0], [0, 0, 0]], [[2, 2, 2], [0, 0, 0], [0, 0, 0]], [[2, 2, 2], [0, 0, 0], [0, 0, 0]], [[2, 2, 2], [0, 2, 0], [0, 0, 0]], [[2, 2, 2], [0, 2, 0], [0, 0, 0]], [[2, 2, 2], [0, 2, 0], [0, 0, 0]]]}, "test_io": {"inputs": [[[0, 1, 0], [0, 0, 0], [0, 1, 0]], [[0, 1, 0], [0, 1, 1], [1, 0, 0]]], "outputs": [[[2, 2, 0], [0, 0, 0], [0, 0, 0]], [[2, 2, 2], [0, 2, 0], [0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    num_non_black = \"count the number of non_black_pixels in the input_grid\"(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    if num_non_black <= 3:\n        output_grid[0, :num_non_black] = red\n    else:\n        output_grid[0, :] = red\n        output_grid[1, 1] = red\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef count_non_black_pixels(input_grid: np.ndarray) -> int:\n    return np.count_nonzero(input_grid != black)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    num_non_black = count_non_black_pixels(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    if num_non_black <= 3:\n        output_grid[0, :num_non_black] = red\n    else:\n        output_grid[0, :] = red\n        output_grid[1, 1] = red\n    return output_grid", "name": "794b24be.json", "description": {"object": "In the input, you should see...a 3x3 grid with between 1 to 4 blue squares in it.", "size": "The output grid size...is the same size as the input grid.", "description": "To make the output, you have to...count the number of blue squares in the input. You will need this same number of squares in the output, but the new squares will become red and will be relocated in the following order until you have used the same number of squares that you counted; First red square goes in top left; second red square (if any) goes if top middle; third red square (if any) goes in top right and fourth red square (if any) goes in middle of grid.", "confidence": 8}}