{"id": 275, "train_io": {"inputs": [[[6, 6, 7, 6], [6, 6, 7, 7], [7, 7, 6, 7]], [[7, 7, 7, 6], [6, 6, 7, 6], [7, 7, 6, 7], [7, 6, 7, 7], [7, 6, 7, 6], [6, 6, 6, 7]], [[7, 7, 6, 6, 6, 6], [6, 7, 6, 7, 7, 7], [7, 6, 7, 7, 6, 7]]], "outputs": [[[2, 2, 7, 2], [2, 2, 7, 7], [7, 7, 2, 7]], [[7, 7, 7, 2], [2, 2, 7, 2], [7, 7, 2, 7], [7, 2, 7, 7], [7, 2, 7, 2], [2, 2, 2, 7]], [[7, 7, 2, 2, 2, 2], [2, 7, 2, 7, 7, 7], [7, 2, 7, 7, 2, 7]]]}, "test_io": {"inputs": [[[6, 7, 7, 6], [6, 7, 6, 7], [7, 7, 7, 6], [7, 6, 7, 6]]], "outputs": [[[2, 7, 7, 2], [2, 7, 2, 7], [7, 7, 7, 2], [7, 2, 7, 2]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_pink_to_red(output_grid: np.ndarray) -> np.ndarray:\n    output_grid[output_grid == pink] = red\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    output_grid = change_pink_to_red(output_grid)\n    return output_grid", "name": "b1948b0a.json", "description": {"object": "In the input, you should see...two colors, one of which is orange.", "size": "The output grid size... is the same as the input size", "description": "To make the output, you have to... turn the not-orange color into light red.", "confidence": 10}}