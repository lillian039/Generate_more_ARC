{"id": 319, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 2, 0, 0, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 2, 0, 0, 0], [0, 8, 0, 2, 0, 2, 0, 2, 0], [0, 8, 0, 8, 0, 8, 0, 2, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 2, 0, 2, 0, 8, 0], [0, 8, 0, 8, 0, 2, 0, 8, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0], [0, 8, 0, 2, 0, 2, 0, 8, 0], [0, 8, 0, 2, 0, 8, 0, 8, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 0, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0, 2, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0, 0], [0, 8, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 8, 0, 0, 0, 2, 0], [0, 8, 0, 8, 0, 0, 0, 2, 0], [0, 8, 0, 8, 0, 2, 0, 8, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_grid(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse each column, count how many red pixels are in each column. Divide this number by 2 and denote it as cnt. Change the cnt pixels at the bottom of the column to teal. Return the changed grid.\n    \"\"\"\n    height, width = input_grid.shape\n    for j in range(width):\n        red_count = 0\n        for i in range(height):\n            if input_grid[i][j] == red:\n                red_count += 1\n        cnt = red_count // 2\n        for i in range(height - 1, height - 1 - cnt, -1):\n            input_grid[i][j] = teal\n    return input_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    ngrid = change_grid(input_grid)\n    return ngrid", "name": "ce9e57f2.json", "description": {"object": "In the input, you should see...4 red bars that rise upward from the bottom of the grid in different heights.", "size": "The output grid size...is the same as the input grid.", "description": "To make the output, you have to...change the lower half of the red bars to light blue and the upper half remain red.  If there are an even number of squares in the bar, the red squares and light blue squares should be even.  If there are an odd number of squares in a bar, there should be one more upper red squares than there are lower blue squares.", "confidence": 9}}