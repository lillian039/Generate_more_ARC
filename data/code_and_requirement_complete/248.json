{"id": 248, "train_io": {"inputs": [[[0, 5, 0], [5, 5, 2], [0, 0, 0]], [[3, 0, 0], [2, 3, 0], [2, 1, 8], [0, 1, 0]], [[5, 2, 3, 0], [2, 5, 3, 0], [5, 2, 8, 8], [0, 0, 6, 0]]], "outputs": [[[0, 5, 0, 0, 5, 0], [5, 5, 2, 5, 5, 2], [0, 0, 0, 0, 0, 0]], [[3, 0, 0, 3, 0, 0], [2, 3, 0, 2, 3, 0], [2, 1, 8, 2, 1, 8], [0, 1, 0, 0, 1, 0]], [[5, 2, 3, 0, 5, 2, 3, 0], [2, 5, 3, 0, 2, 5, 3, 0], [5, 2, 8, 8, 5, 2, 8, 8], [0, 0, 6, 0, 0, 0, 6, 0]]]}, "test_io": {"inputs": [[[4, 0, 0, 0], [4, 5, 0, 0], [0, 5, 6, 0], [6, 6, 1, 0], [0, 0, 0, 1]]], "outputs": [[[4, 0, 0, 0, 4, 0, 0, 0], [4, 5, 0, 0, 4, 5, 0, 0], [0, 5, 6, 0, 0, 5, 6, 0], [6, 6, 1, 0, 6, 6, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1]]]}, "solved": true, "generalizable": true, "anpl": "def double_size_shape1(input_grid: np.ndarray) -> np.ndarray:\n    out = np.concatenate((input_grid, input_grid), axis=1)\n    return out\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    out = double_size_shape1(input_grid)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef double_size_shape1(input_grid: np.ndarray) -> np.ndarray:\n    out = np.concatenate((input_grid, input_grid), axis=1)\n    return out\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    out = double_size_shape1(input_grid)\n    return out", "name": "a416b8f3.json", "description": {"object": "In the input, you should see... a grid with colored squares", "size": "The output grid size... is the same height as the input grid but twice as wide", "description": "To make the output, you have to... place the input design all the way on the left half and then duplicate the exact same design and colors on the right half. The final grid is two of the original grid next to each other.", "confidence": 9}}