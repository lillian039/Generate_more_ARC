{"id": 291, "train_io": {"inputs": [[[4, 0, 4, 0, 4, 0, 4, 0, 4, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 4, 0, 4, 0, 4, 0, 4, 0, 4]], [[0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4]], [[4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0]], [[4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0]], [[0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0]]], "outputs": [[[6, 0, 4, 0, 4, 0, 6, 0, 4, 0], [6, 4, 4, 6, 4, 4, 6, 4, 4, 6], [0, 4, 0, 6, 0, 4, 0, 4, 0, 6]], [[0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0], [6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4], [6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4]], [[6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4], [6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4], [0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0]], [[6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4, 0, 6], [6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4, 4, 6], [0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0, 4, 0]], [[0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4], [6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4], [6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0]]]}, "test_io": {"inputs": [[[0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4]]], "outputs": [[[0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0], [6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4, 4, 6, 4], [6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4, 0, 6, 0, 4, 0, 4]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    color the yellow pixels that in the column that can mod 3 to pink.\n    \"\"\"\n    output_grid = input_grid.copy()\n    for col in range(input_grid.shape[1]):\n        for row in range(input_grid.shape[0]):\n            if col % 3 == 0:\n                if output_grid[row, col] == yellow:\n                    output_grid[row, col] = pink\n    return output_grid", "name": "ba26e723.json", "description": {"object": "In the input, you should see...alternating pairs of yellow blocks going up and down.", "size": "The output grid size...is the same size.", "description": "To make the output, you have to...start by changing the first set of two blocks to pink. Then skip two pairs and change the next two pink. Complete this pattern to the end of the grid.", "confidence": 9}}